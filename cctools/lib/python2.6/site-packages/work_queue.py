# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_work_queue', [dirname(__file__)])
        except ImportError:
            import _work_queue
            return _work_queue
        if fp is not None:
            try:
                _mod = imp.load_module('_work_queue', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _work_queue = swig_import_helper()
    del swig_import_helper
else:
    import _work_queue
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


D_INFO = _work_queue.D_INFO
D_FATAL = _work_queue.D_FATAL
D_ERROR = _work_queue.D_ERROR
D_NOTICE = _work_queue.D_NOTICE
D_DEBUG = _work_queue.D_DEBUG
D_SYSCALL = _work_queue.D_SYSCALL
D_CHANNEL = _work_queue.D_CHANNEL
D_PROCESS = _work_queue.D_PROCESS
D_RESOLVE = _work_queue.D_RESOLVE
D_LIBCALL = _work_queue.D_LIBCALL
D_LOCAL = _work_queue.D_LOCAL
D_DNS = _work_queue.D_DNS
D_TCP = _work_queue.D_TCP
D_AUTH = _work_queue.D_AUTH
D_IRODS = _work_queue.D_IRODS
D_CVMFS = _work_queue.D_CVMFS
D_HTTP = _work_queue.D_HTTP
D_FTP = _work_queue.D_FTP
D_NEST = _work_queue.D_NEST
D_GROW = _work_queue.D_GROW
D_CHIRP = _work_queue.D_CHIRP
D_DCAP = _work_queue.D_DCAP
D_RFIO = _work_queue.D_RFIO
D_GLITE = _work_queue.D_GLITE
D_MULTI = _work_queue.D_MULTI
D_PSTREE = _work_queue.D_PSTREE
D_ALLOC = _work_queue.D_ALLOC
D_LFC = _work_queue.D_LFC
D_GFAL = _work_queue.D_GFAL
D_SUMMARY = _work_queue.D_SUMMARY
D_LOGIN = _work_queue.D_LOGIN
D_CACHE = _work_queue.D_CACHE
D_POLL = _work_queue.D_POLL
D_HDFS = _work_queue.D_HDFS
D_WQ = _work_queue.D_WQ
D_BXGRID = _work_queue.D_BXGRID
D_USER = _work_queue.D_USER
D_XROOTD = _work_queue.D_XROOTD
D_MPI = _work_queue.D_MPI
D_BATCH = _work_queue.D_BATCH
D_RMON = _work_queue.D_RMON
D_REMOTE = _work_queue.D_REMOTE
D_ALL = _work_queue.D_ALL

def cctools_debug(*args):
  return _work_queue.cctools_debug(*args)
cctools_debug = _work_queue.cctools_debug

def cctools_warn(*args):
  return _work_queue.cctools_warn(*args)
cctools_warn = _work_queue.cctools_warn

def cctools_fatal(*args):
  return _work_queue.cctools_fatal(*args)
cctools_fatal = _work_queue.cctools_fatal

def cctools_debug_config(*args):
  return _work_queue.cctools_debug_config(*args)
cctools_debug_config = _work_queue.cctools_debug_config

def cctools_debug_config_file(*args):
  return _work_queue.cctools_debug_config_file(*args)
cctools_debug_config_file = _work_queue.cctools_debug_config_file

def cctools_debug_config_file_size(*args):
  return _work_queue.cctools_debug_config_file_size(*args)
cctools_debug_config_file_size = _work_queue.cctools_debug_config_file_size

def cctools_debug_config_fatal(*args):
  return _work_queue.cctools_debug_config_fatal(*args)
cctools_debug_config_fatal = _work_queue.cctools_debug_config_fatal

def cctools_debug_config_getpid(*args):
  return _work_queue.cctools_debug_config_getpid(*args)
cctools_debug_config_getpid = _work_queue.cctools_debug_config_getpid

def cctools_debug_flags_set(*args):
  return _work_queue.cctools_debug_flags_set(*args)
cctools_debug_flags_set = _work_queue.cctools_debug_flags_set

def cctools_debug_flags_print(*args):
  return _work_queue.cctools_debug_flags_print(*args)
cctools_debug_flags_print = _work_queue.cctools_debug_flags_print

def cctools_debug_flags_clear():
  return _work_queue.cctools_debug_flags_clear()
cctools_debug_flags_clear = _work_queue.cctools_debug_flags_clear

def cctools_debug_set_flag_name(*args):
  return _work_queue.cctools_debug_set_flag_name(*args)
cctools_debug_set_flag_name = _work_queue.cctools_debug_set_flag_name

def cctools_debug_flags_restore(*args):
  return _work_queue.cctools_debug_flags_restore(*args)
cctools_debug_flags_restore = _work_queue.cctools_debug_flags_restore

def cctools_debug_rename(*args):
  return _work_queue.cctools_debug_rename(*args)
cctools_debug_rename = _work_queue.cctools_debug_rename

def debug_reopen():
  return _work_queue.debug_reopen()
debug_reopen = _work_queue.debug_reopen

def timestamp_get():
  return _work_queue.timestamp_get()
timestamp_get = _work_queue.timestamp_get

def timestamp_fmt(*args):
  return _work_queue.timestamp_fmt(*args)
timestamp_fmt = _work_queue.timestamp_fmt

def timestamp_sleep(*args):
  return _work_queue.timestamp_sleep(*args)
timestamp_sleep = _work_queue.timestamp_sleep

def timestamp_file(*args):
  return _work_queue.timestamp_file(*args)
timestamp_file = _work_queue.timestamp_file
WORK_QUEUE_DEFAULT_PORT = _work_queue.WORK_QUEUE_DEFAULT_PORT
WORK_QUEUE_RANDOM_PORT = _work_queue.WORK_QUEUE_RANDOM_PORT
WORK_QUEUE_WAITFORTASK = _work_queue.WORK_QUEUE_WAITFORTASK
WORK_QUEUE_SCHEDULE_UNSET = _work_queue.WORK_QUEUE_SCHEDULE_UNSET
WORK_QUEUE_SCHEDULE_FCFS = _work_queue.WORK_QUEUE_SCHEDULE_FCFS
WORK_QUEUE_SCHEDULE_FILES = _work_queue.WORK_QUEUE_SCHEDULE_FILES
WORK_QUEUE_SCHEDULE_TIME = _work_queue.WORK_QUEUE_SCHEDULE_TIME
WORK_QUEUE_SCHEDULE_RAND = _work_queue.WORK_QUEUE_SCHEDULE_RAND
WORK_QUEUE_TASK_ORDER_FIFO = _work_queue.WORK_QUEUE_TASK_ORDER_FIFO
WORK_QUEUE_TASK_ORDER_LIFO = _work_queue.WORK_QUEUE_TASK_ORDER_LIFO
WORK_QUEUE_INPUT = _work_queue.WORK_QUEUE_INPUT
WORK_QUEUE_OUTPUT = _work_queue.WORK_QUEUE_OUTPUT
WORK_QUEUE_NOCACHE = _work_queue.WORK_QUEUE_NOCACHE
WORK_QUEUE_CACHE = _work_queue.WORK_QUEUE_CACHE
WORK_QUEUE_SYMLINK = _work_queue.WORK_QUEUE_SYMLINK
WORK_QUEUE_PREEXIST = _work_queue.WORK_QUEUE_PREEXIST
WORK_QUEUE_THIRDGET = _work_queue.WORK_QUEUE_THIRDGET
WORK_QUEUE_THIRDPUT = _work_queue.WORK_QUEUE_THIRDPUT
WORK_QUEUE_WATCH = _work_queue.WORK_QUEUE_WATCH
WORK_QUEUE_RESET_ALL = _work_queue.WORK_QUEUE_RESET_ALL
WORK_QUEUE_RESET_KEEP_TASKS = _work_queue.WORK_QUEUE_RESET_KEEP_TASKS
WORK_QUEUE_DEFAULT_KEEPALIVE_INTERVAL = _work_queue.WORK_QUEUE_DEFAULT_KEEPALIVE_INTERVAL
WORK_QUEUE_DEFAULT_KEEPALIVE_TIMEOUT = _work_queue.WORK_QUEUE_DEFAULT_KEEPALIVE_TIMEOUT
WORK_QUEUE_RESULT_SUCCESS = _work_queue.WORK_QUEUE_RESULT_SUCCESS
WORK_QUEUE_RESULT_INPUT_MISSING = _work_queue.WORK_QUEUE_RESULT_INPUT_MISSING
WORK_QUEUE_RESULT_OUTPUT_MISSING = _work_queue.WORK_QUEUE_RESULT_OUTPUT_MISSING
WORK_QUEUE_RESULT_STDOUT_MISSING = _work_queue.WORK_QUEUE_RESULT_STDOUT_MISSING
class work_queue_task(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, work_queue_task, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, work_queue_task, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tag"] = _work_queue.work_queue_task_tag_set
    __swig_getmethods__["tag"] = _work_queue.work_queue_task_tag_get
    if _newclass:tag = _swig_property(_work_queue.work_queue_task_tag_get, _work_queue.work_queue_task_tag_set)
    __swig_setmethods__["command_line"] = _work_queue.work_queue_task_command_line_set
    __swig_getmethods__["command_line"] = _work_queue.work_queue_task_command_line_get
    if _newclass:command_line = _swig_property(_work_queue.work_queue_task_command_line_get, _work_queue.work_queue_task_command_line_set)
    __swig_setmethods__["worker_selection_algorithm"] = _work_queue.work_queue_task_worker_selection_algorithm_set
    __swig_getmethods__["worker_selection_algorithm"] = _work_queue.work_queue_task_worker_selection_algorithm_get
    if _newclass:worker_selection_algorithm = _swig_property(_work_queue.work_queue_task_worker_selection_algorithm_get, _work_queue.work_queue_task_worker_selection_algorithm_set)
    __swig_setmethods__["output"] = _work_queue.work_queue_task_output_set
    __swig_getmethods__["output"] = _work_queue.work_queue_task_output_get
    if _newclass:output = _swig_property(_work_queue.work_queue_task_output_get, _work_queue.work_queue_task_output_set)
    __swig_setmethods__["taskid"] = _work_queue.work_queue_task_taskid_set
    __swig_getmethods__["taskid"] = _work_queue.work_queue_task_taskid_get
    if _newclass:taskid = _swig_property(_work_queue.work_queue_task_taskid_get, _work_queue.work_queue_task_taskid_set)
    __swig_setmethods__["return_status"] = _work_queue.work_queue_task_return_status_set
    __swig_getmethods__["return_status"] = _work_queue.work_queue_task_return_status_get
    if _newclass:return_status = _swig_property(_work_queue.work_queue_task_return_status_get, _work_queue.work_queue_task_return_status_set)
    __swig_setmethods__["result"] = _work_queue.work_queue_task_result_set
    __swig_getmethods__["result"] = _work_queue.work_queue_task_result_get
    if _newclass:result = _swig_property(_work_queue.work_queue_task_result_get, _work_queue.work_queue_task_result_set)
    __swig_setmethods__["host"] = _work_queue.work_queue_task_host_set
    __swig_getmethods__["host"] = _work_queue.work_queue_task_host_get
    if _newclass:host = _swig_property(_work_queue.work_queue_task_host_get, _work_queue.work_queue_task_host_set)
    __swig_setmethods__["hostname"] = _work_queue.work_queue_task_hostname_set
    __swig_getmethods__["hostname"] = _work_queue.work_queue_task_hostname_get
    if _newclass:hostname = _swig_property(_work_queue.work_queue_task_hostname_get, _work_queue.work_queue_task_hostname_set)
    __swig_setmethods__["time_committed"] = _work_queue.work_queue_task_time_committed_set
    __swig_getmethods__["time_committed"] = _work_queue.work_queue_task_time_committed_get
    if _newclass:time_committed = _swig_property(_work_queue.work_queue_task_time_committed_get, _work_queue.work_queue_task_time_committed_set)
    __swig_setmethods__["time_task_submit"] = _work_queue.work_queue_task_time_task_submit_set
    __swig_getmethods__["time_task_submit"] = _work_queue.work_queue_task_time_task_submit_get
    if _newclass:time_task_submit = _swig_property(_work_queue.work_queue_task_time_task_submit_get, _work_queue.work_queue_task_time_task_submit_set)
    __swig_setmethods__["time_task_finish"] = _work_queue.work_queue_task_time_task_finish_set
    __swig_getmethods__["time_task_finish"] = _work_queue.work_queue_task_time_task_finish_get
    if _newclass:time_task_finish = _swig_property(_work_queue.work_queue_task_time_task_finish_get, _work_queue.work_queue_task_time_task_finish_set)
    __swig_setmethods__["time_send_input_start"] = _work_queue.work_queue_task_time_send_input_start_set
    __swig_getmethods__["time_send_input_start"] = _work_queue.work_queue_task_time_send_input_start_get
    if _newclass:time_send_input_start = _swig_property(_work_queue.work_queue_task_time_send_input_start_get, _work_queue.work_queue_task_time_send_input_start_set)
    __swig_setmethods__["time_send_input_finish"] = _work_queue.work_queue_task_time_send_input_finish_set
    __swig_getmethods__["time_send_input_finish"] = _work_queue.work_queue_task_time_send_input_finish_get
    if _newclass:time_send_input_finish = _swig_property(_work_queue.work_queue_task_time_send_input_finish_get, _work_queue.work_queue_task_time_send_input_finish_set)
    __swig_setmethods__["time_execute_cmd_start"] = _work_queue.work_queue_task_time_execute_cmd_start_set
    __swig_getmethods__["time_execute_cmd_start"] = _work_queue.work_queue_task_time_execute_cmd_start_get
    if _newclass:time_execute_cmd_start = _swig_property(_work_queue.work_queue_task_time_execute_cmd_start_get, _work_queue.work_queue_task_time_execute_cmd_start_set)
    __swig_setmethods__["time_execute_cmd_finish"] = _work_queue.work_queue_task_time_execute_cmd_finish_set
    __swig_getmethods__["time_execute_cmd_finish"] = _work_queue.work_queue_task_time_execute_cmd_finish_get
    if _newclass:time_execute_cmd_finish = _swig_property(_work_queue.work_queue_task_time_execute_cmd_finish_get, _work_queue.work_queue_task_time_execute_cmd_finish_set)
    __swig_setmethods__["time_receive_result_start"] = _work_queue.work_queue_task_time_receive_result_start_set
    __swig_getmethods__["time_receive_result_start"] = _work_queue.work_queue_task_time_receive_result_start_get
    if _newclass:time_receive_result_start = _swig_property(_work_queue.work_queue_task_time_receive_result_start_get, _work_queue.work_queue_task_time_receive_result_start_set)
    __swig_setmethods__["time_receive_result_finish"] = _work_queue.work_queue_task_time_receive_result_finish_set
    __swig_getmethods__["time_receive_result_finish"] = _work_queue.work_queue_task_time_receive_result_finish_get
    if _newclass:time_receive_result_finish = _swig_property(_work_queue.work_queue_task_time_receive_result_finish_get, _work_queue.work_queue_task_time_receive_result_finish_set)
    __swig_setmethods__["time_receive_output_start"] = _work_queue.work_queue_task_time_receive_output_start_set
    __swig_getmethods__["time_receive_output_start"] = _work_queue.work_queue_task_time_receive_output_start_get
    if _newclass:time_receive_output_start = _swig_property(_work_queue.work_queue_task_time_receive_output_start_get, _work_queue.work_queue_task_time_receive_output_start_set)
    __swig_setmethods__["time_receive_output_finish"] = _work_queue.work_queue_task_time_receive_output_finish_set
    __swig_getmethods__["time_receive_output_finish"] = _work_queue.work_queue_task_time_receive_output_finish_get
    if _newclass:time_receive_output_finish = _swig_property(_work_queue.work_queue_task_time_receive_output_finish_get, _work_queue.work_queue_task_time_receive_output_finish_set)
    __swig_setmethods__["total_bytes_received"] = _work_queue.work_queue_task_total_bytes_received_set
    __swig_getmethods__["total_bytes_received"] = _work_queue.work_queue_task_total_bytes_received_get
    if _newclass:total_bytes_received = _swig_property(_work_queue.work_queue_task_total_bytes_received_get, _work_queue.work_queue_task_total_bytes_received_set)
    __swig_setmethods__["total_bytes_sent"] = _work_queue.work_queue_task_total_bytes_sent_set
    __swig_getmethods__["total_bytes_sent"] = _work_queue.work_queue_task_total_bytes_sent_get
    if _newclass:total_bytes_sent = _swig_property(_work_queue.work_queue_task_total_bytes_sent_get, _work_queue.work_queue_task_total_bytes_sent_set)
    __swig_setmethods__["total_bytes_transferred"] = _work_queue.work_queue_task_total_bytes_transferred_set
    __swig_getmethods__["total_bytes_transferred"] = _work_queue.work_queue_task_total_bytes_transferred_get
    if _newclass:total_bytes_transferred = _swig_property(_work_queue.work_queue_task_total_bytes_transferred_get, _work_queue.work_queue_task_total_bytes_transferred_set)
    __swig_setmethods__["total_transfer_time"] = _work_queue.work_queue_task_total_transfer_time_set
    __swig_getmethods__["total_transfer_time"] = _work_queue.work_queue_task_total_transfer_time_get
    if _newclass:total_transfer_time = _swig_property(_work_queue.work_queue_task_total_transfer_time_get, _work_queue.work_queue_task_total_transfer_time_set)
    __swig_setmethods__["cmd_execution_time"] = _work_queue.work_queue_task_cmd_execution_time_set
    __swig_getmethods__["cmd_execution_time"] = _work_queue.work_queue_task_cmd_execution_time_get
    if _newclass:cmd_execution_time = _swig_property(_work_queue.work_queue_task_cmd_execution_time_get, _work_queue.work_queue_task_cmd_execution_time_set)
    __swig_setmethods__["total_submissions"] = _work_queue.work_queue_task_total_submissions_set
    __swig_getmethods__["total_submissions"] = _work_queue.work_queue_task_total_submissions_get
    if _newclass:total_submissions = _swig_property(_work_queue.work_queue_task_total_submissions_get, _work_queue.work_queue_task_total_submissions_set)
    __swig_setmethods__["total_cmd_execution_time"] = _work_queue.work_queue_task_total_cmd_execution_time_set
    __swig_getmethods__["total_cmd_execution_time"] = _work_queue.work_queue_task_total_cmd_execution_time_get
    if _newclass:total_cmd_execution_time = _swig_property(_work_queue.work_queue_task_total_cmd_execution_time_get, _work_queue.work_queue_task_total_cmd_execution_time_set)
    __swig_setmethods__["memory"] = _work_queue.work_queue_task_memory_set
    __swig_getmethods__["memory"] = _work_queue.work_queue_task_memory_get
    if _newclass:memory = _swig_property(_work_queue.work_queue_task_memory_get, _work_queue.work_queue_task_memory_set)
    __swig_setmethods__["disk"] = _work_queue.work_queue_task_disk_set
    __swig_getmethods__["disk"] = _work_queue.work_queue_task_disk_get
    if _newclass:disk = _swig_property(_work_queue.work_queue_task_disk_get, _work_queue.work_queue_task_disk_set)
    __swig_setmethods__["cores"] = _work_queue.work_queue_task_cores_set
    __swig_getmethods__["cores"] = _work_queue.work_queue_task_cores_get
    if _newclass:cores = _swig_property(_work_queue.work_queue_task_cores_get, _work_queue.work_queue_task_cores_set)
    __swig_setmethods__["gpus"] = _work_queue.work_queue_task_gpus_set
    __swig_getmethods__["gpus"] = _work_queue.work_queue_task_gpus_get
    if _newclass:gpus = _swig_property(_work_queue.work_queue_task_gpus_get, _work_queue.work_queue_task_gpus_set)
    __swig_setmethods__["unlabeled"] = _work_queue.work_queue_task_unlabeled_set
    __swig_getmethods__["unlabeled"] = _work_queue.work_queue_task_unlabeled_get
    if _newclass:unlabeled = _swig_property(_work_queue.work_queue_task_unlabeled_get, _work_queue.work_queue_task_unlabeled_set)
    __swig_setmethods__["time_app_delay"] = _work_queue.work_queue_task_time_app_delay_set
    __swig_getmethods__["time_app_delay"] = _work_queue.work_queue_task_time_app_delay_get
    if _newclass:time_app_delay = _swig_property(_work_queue.work_queue_task_time_app_delay_get, _work_queue.work_queue_task_time_app_delay_set)
    def __init__(self): 
        this = _work_queue.new_work_queue_task()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _work_queue.delete_work_queue_task
    __del__ = lambda self : None;
work_queue_task_swigregister = _work_queue.work_queue_task_swigregister
work_queue_task_swigregister(work_queue_task)
cvar = _work_queue.cvar

class work_queue_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, work_queue_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, work_queue_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["total_workers_connected"] = _work_queue.work_queue_stats_total_workers_connected_set
    __swig_getmethods__["total_workers_connected"] = _work_queue.work_queue_stats_total_workers_connected_get
    if _newclass:total_workers_connected = _swig_property(_work_queue.work_queue_stats_total_workers_connected_get, _work_queue.work_queue_stats_total_workers_connected_set)
    __swig_setmethods__["workers_init"] = _work_queue.work_queue_stats_workers_init_set
    __swig_getmethods__["workers_init"] = _work_queue.work_queue_stats_workers_init_get
    if _newclass:workers_init = _swig_property(_work_queue.work_queue_stats_workers_init_get, _work_queue.work_queue_stats_workers_init_set)
    __swig_setmethods__["workers_idle"] = _work_queue.work_queue_stats_workers_idle_set
    __swig_getmethods__["workers_idle"] = _work_queue.work_queue_stats_workers_idle_get
    if _newclass:workers_idle = _swig_property(_work_queue.work_queue_stats_workers_idle_get, _work_queue.work_queue_stats_workers_idle_set)
    __swig_setmethods__["workers_busy"] = _work_queue.work_queue_stats_workers_busy_set
    __swig_getmethods__["workers_busy"] = _work_queue.work_queue_stats_workers_busy_get
    if _newclass:workers_busy = _swig_property(_work_queue.work_queue_stats_workers_busy_get, _work_queue.work_queue_stats_workers_busy_set)
    __swig_setmethods__["total_workers_joined"] = _work_queue.work_queue_stats_total_workers_joined_set
    __swig_getmethods__["total_workers_joined"] = _work_queue.work_queue_stats_total_workers_joined_get
    if _newclass:total_workers_joined = _swig_property(_work_queue.work_queue_stats_total_workers_joined_get, _work_queue.work_queue_stats_total_workers_joined_set)
    __swig_setmethods__["total_workers_removed"] = _work_queue.work_queue_stats_total_workers_removed_set
    __swig_getmethods__["total_workers_removed"] = _work_queue.work_queue_stats_total_workers_removed_get
    if _newclass:total_workers_removed = _swig_property(_work_queue.work_queue_stats_total_workers_removed_get, _work_queue.work_queue_stats_total_workers_removed_set)
    __swig_setmethods__["tasks_waiting"] = _work_queue.work_queue_stats_tasks_waiting_set
    __swig_getmethods__["tasks_waiting"] = _work_queue.work_queue_stats_tasks_waiting_get
    if _newclass:tasks_waiting = _swig_property(_work_queue.work_queue_stats_tasks_waiting_get, _work_queue.work_queue_stats_tasks_waiting_set)
    __swig_setmethods__["tasks_running"] = _work_queue.work_queue_stats_tasks_running_set
    __swig_getmethods__["tasks_running"] = _work_queue.work_queue_stats_tasks_running_get
    if _newclass:tasks_running = _swig_property(_work_queue.work_queue_stats_tasks_running_get, _work_queue.work_queue_stats_tasks_running_set)
    __swig_setmethods__["tasks_complete"] = _work_queue.work_queue_stats_tasks_complete_set
    __swig_getmethods__["tasks_complete"] = _work_queue.work_queue_stats_tasks_complete_get
    if _newclass:tasks_complete = _swig_property(_work_queue.work_queue_stats_tasks_complete_get, _work_queue.work_queue_stats_tasks_complete_set)
    __swig_setmethods__["total_tasks_dispatched"] = _work_queue.work_queue_stats_total_tasks_dispatched_set
    __swig_getmethods__["total_tasks_dispatched"] = _work_queue.work_queue_stats_total_tasks_dispatched_get
    if _newclass:total_tasks_dispatched = _swig_property(_work_queue.work_queue_stats_total_tasks_dispatched_get, _work_queue.work_queue_stats_total_tasks_dispatched_set)
    __swig_setmethods__["total_tasks_complete"] = _work_queue.work_queue_stats_total_tasks_complete_set
    __swig_getmethods__["total_tasks_complete"] = _work_queue.work_queue_stats_total_tasks_complete_get
    if _newclass:total_tasks_complete = _swig_property(_work_queue.work_queue_stats_total_tasks_complete_get, _work_queue.work_queue_stats_total_tasks_complete_set)
    __swig_setmethods__["total_tasks_cancelled"] = _work_queue.work_queue_stats_total_tasks_cancelled_set
    __swig_getmethods__["total_tasks_cancelled"] = _work_queue.work_queue_stats_total_tasks_cancelled_get
    if _newclass:total_tasks_cancelled = _swig_property(_work_queue.work_queue_stats_total_tasks_cancelled_get, _work_queue.work_queue_stats_total_tasks_cancelled_set)
    __swig_setmethods__["start_time"] = _work_queue.work_queue_stats_start_time_set
    __swig_getmethods__["start_time"] = _work_queue.work_queue_stats_start_time_get
    if _newclass:start_time = _swig_property(_work_queue.work_queue_stats_start_time_get, _work_queue.work_queue_stats_start_time_set)
    __swig_setmethods__["total_send_time"] = _work_queue.work_queue_stats_total_send_time_set
    __swig_getmethods__["total_send_time"] = _work_queue.work_queue_stats_total_send_time_get
    if _newclass:total_send_time = _swig_property(_work_queue.work_queue_stats_total_send_time_get, _work_queue.work_queue_stats_total_send_time_set)
    __swig_setmethods__["total_receive_time"] = _work_queue.work_queue_stats_total_receive_time_set
    __swig_getmethods__["total_receive_time"] = _work_queue.work_queue_stats_total_receive_time_get
    if _newclass:total_receive_time = _swig_property(_work_queue.work_queue_stats_total_receive_time_get, _work_queue.work_queue_stats_total_receive_time_set)
    __swig_setmethods__["total_bytes_sent"] = _work_queue.work_queue_stats_total_bytes_sent_set
    __swig_getmethods__["total_bytes_sent"] = _work_queue.work_queue_stats_total_bytes_sent_get
    if _newclass:total_bytes_sent = _swig_property(_work_queue.work_queue_stats_total_bytes_sent_get, _work_queue.work_queue_stats_total_bytes_sent_set)
    __swig_setmethods__["total_bytes_received"] = _work_queue.work_queue_stats_total_bytes_received_set
    __swig_getmethods__["total_bytes_received"] = _work_queue.work_queue_stats_total_bytes_received_get
    if _newclass:total_bytes_received = _swig_property(_work_queue.work_queue_stats_total_bytes_received_get, _work_queue.work_queue_stats_total_bytes_received_set)
    __swig_setmethods__["efficiency"] = _work_queue.work_queue_stats_efficiency_set
    __swig_getmethods__["efficiency"] = _work_queue.work_queue_stats_efficiency_get
    if _newclass:efficiency = _swig_property(_work_queue.work_queue_stats_efficiency_get, _work_queue.work_queue_stats_efficiency_set)
    __swig_setmethods__["idle_percentage"] = _work_queue.work_queue_stats_idle_percentage_set
    __swig_getmethods__["idle_percentage"] = _work_queue.work_queue_stats_idle_percentage_get
    if _newclass:idle_percentage = _swig_property(_work_queue.work_queue_stats_idle_percentage_get, _work_queue.work_queue_stats_idle_percentage_set)
    __swig_setmethods__["capacity"] = _work_queue.work_queue_stats_capacity_set
    __swig_getmethods__["capacity"] = _work_queue.work_queue_stats_capacity_get
    if _newclass:capacity = _swig_property(_work_queue.work_queue_stats_capacity_get, _work_queue.work_queue_stats_capacity_set)
    __swig_setmethods__["bandwidth"] = _work_queue.work_queue_stats_bandwidth_set
    __swig_getmethods__["bandwidth"] = _work_queue.work_queue_stats_bandwidth_get
    if _newclass:bandwidth = _swig_property(_work_queue.work_queue_stats_bandwidth_get, _work_queue.work_queue_stats_bandwidth_set)
    __swig_setmethods__["total_cores"] = _work_queue.work_queue_stats_total_cores_set
    __swig_getmethods__["total_cores"] = _work_queue.work_queue_stats_total_cores_get
    if _newclass:total_cores = _swig_property(_work_queue.work_queue_stats_total_cores_get, _work_queue.work_queue_stats_total_cores_set)
    __swig_setmethods__["total_memory"] = _work_queue.work_queue_stats_total_memory_set
    __swig_getmethods__["total_memory"] = _work_queue.work_queue_stats_total_memory_get
    if _newclass:total_memory = _swig_property(_work_queue.work_queue_stats_total_memory_get, _work_queue.work_queue_stats_total_memory_set)
    __swig_setmethods__["total_disk"] = _work_queue.work_queue_stats_total_disk_set
    __swig_getmethods__["total_disk"] = _work_queue.work_queue_stats_total_disk_get
    if _newclass:total_disk = _swig_property(_work_queue.work_queue_stats_total_disk_get, _work_queue.work_queue_stats_total_disk_set)
    __swig_setmethods__["total_gpus"] = _work_queue.work_queue_stats_total_gpus_set
    __swig_getmethods__["total_gpus"] = _work_queue.work_queue_stats_total_gpus_get
    if _newclass:total_gpus = _swig_property(_work_queue.work_queue_stats_total_gpus_get, _work_queue.work_queue_stats_total_gpus_set)
    __swig_setmethods__["committed_cores"] = _work_queue.work_queue_stats_committed_cores_set
    __swig_getmethods__["committed_cores"] = _work_queue.work_queue_stats_committed_cores_get
    if _newclass:committed_cores = _swig_property(_work_queue.work_queue_stats_committed_cores_get, _work_queue.work_queue_stats_committed_cores_set)
    __swig_setmethods__["committed_memory"] = _work_queue.work_queue_stats_committed_memory_set
    __swig_getmethods__["committed_memory"] = _work_queue.work_queue_stats_committed_memory_get
    if _newclass:committed_memory = _swig_property(_work_queue.work_queue_stats_committed_memory_get, _work_queue.work_queue_stats_committed_memory_set)
    __swig_setmethods__["committed_disk"] = _work_queue.work_queue_stats_committed_disk_set
    __swig_getmethods__["committed_disk"] = _work_queue.work_queue_stats_committed_disk_get
    if _newclass:committed_disk = _swig_property(_work_queue.work_queue_stats_committed_disk_get, _work_queue.work_queue_stats_committed_disk_set)
    __swig_setmethods__["committed_gpus"] = _work_queue.work_queue_stats_committed_gpus_set
    __swig_getmethods__["committed_gpus"] = _work_queue.work_queue_stats_committed_gpus_get
    if _newclass:committed_gpus = _swig_property(_work_queue.work_queue_stats_committed_gpus_get, _work_queue.work_queue_stats_committed_gpus_set)
    __swig_setmethods__["min_cores"] = _work_queue.work_queue_stats_min_cores_set
    __swig_getmethods__["min_cores"] = _work_queue.work_queue_stats_min_cores_get
    if _newclass:min_cores = _swig_property(_work_queue.work_queue_stats_min_cores_get, _work_queue.work_queue_stats_min_cores_set)
    __swig_setmethods__["max_cores"] = _work_queue.work_queue_stats_max_cores_set
    __swig_getmethods__["max_cores"] = _work_queue.work_queue_stats_max_cores_get
    if _newclass:max_cores = _swig_property(_work_queue.work_queue_stats_max_cores_get, _work_queue.work_queue_stats_max_cores_set)
    __swig_setmethods__["min_memory"] = _work_queue.work_queue_stats_min_memory_set
    __swig_getmethods__["min_memory"] = _work_queue.work_queue_stats_min_memory_get
    if _newclass:min_memory = _swig_property(_work_queue.work_queue_stats_min_memory_get, _work_queue.work_queue_stats_min_memory_set)
    __swig_setmethods__["max_memory"] = _work_queue.work_queue_stats_max_memory_set
    __swig_getmethods__["max_memory"] = _work_queue.work_queue_stats_max_memory_get
    if _newclass:max_memory = _swig_property(_work_queue.work_queue_stats_max_memory_get, _work_queue.work_queue_stats_max_memory_set)
    __swig_setmethods__["min_disk"] = _work_queue.work_queue_stats_min_disk_set
    __swig_getmethods__["min_disk"] = _work_queue.work_queue_stats_min_disk_get
    if _newclass:min_disk = _swig_property(_work_queue.work_queue_stats_min_disk_get, _work_queue.work_queue_stats_min_disk_set)
    __swig_setmethods__["max_disk"] = _work_queue.work_queue_stats_max_disk_set
    __swig_getmethods__["max_disk"] = _work_queue.work_queue_stats_max_disk_get
    if _newclass:max_disk = _swig_property(_work_queue.work_queue_stats_max_disk_get, _work_queue.work_queue_stats_max_disk_set)
    __swig_setmethods__["min_gpus"] = _work_queue.work_queue_stats_min_gpus_set
    __swig_getmethods__["min_gpus"] = _work_queue.work_queue_stats_min_gpus_get
    if _newclass:min_gpus = _swig_property(_work_queue.work_queue_stats_min_gpus_get, _work_queue.work_queue_stats_min_gpus_set)
    __swig_setmethods__["max_gpus"] = _work_queue.work_queue_stats_max_gpus_set
    __swig_getmethods__["max_gpus"] = _work_queue.work_queue_stats_max_gpus_get
    if _newclass:max_gpus = _swig_property(_work_queue.work_queue_stats_max_gpus_get, _work_queue.work_queue_stats_max_gpus_set)
    __swig_setmethods__["total_execute_time"] = _work_queue.work_queue_stats_total_execute_time_set
    __swig_getmethods__["total_execute_time"] = _work_queue.work_queue_stats_total_execute_time_get
    if _newclass:total_execute_time = _swig_property(_work_queue.work_queue_stats_total_execute_time_get, _work_queue.work_queue_stats_total_execute_time_set)
    __swig_setmethods__["total_good_execute_time"] = _work_queue.work_queue_stats_total_good_execute_time_set
    __swig_getmethods__["total_good_execute_time"] = _work_queue.work_queue_stats_total_good_execute_time_get
    if _newclass:total_good_execute_time = _swig_property(_work_queue.work_queue_stats_total_good_execute_time_get, _work_queue.work_queue_stats_total_good_execute_time_set)
    __swig_setmethods__["port"] = _work_queue.work_queue_stats_port_set
    __swig_getmethods__["port"] = _work_queue.work_queue_stats_port_get
    if _newclass:port = _swig_property(_work_queue.work_queue_stats_port_get, _work_queue.work_queue_stats_port_set)
    __swig_setmethods__["priority"] = _work_queue.work_queue_stats_priority_set
    __swig_getmethods__["priority"] = _work_queue.work_queue_stats_priority_get
    if _newclass:priority = _swig_property(_work_queue.work_queue_stats_priority_get, _work_queue.work_queue_stats_priority_set)
    __swig_setmethods__["workers_ready"] = _work_queue.work_queue_stats_workers_ready_set
    __swig_getmethods__["workers_ready"] = _work_queue.work_queue_stats_workers_ready_get
    if _newclass:workers_ready = _swig_property(_work_queue.work_queue_stats_workers_ready_get, _work_queue.work_queue_stats_workers_ready_set)
    __swig_setmethods__["workers_full"] = _work_queue.work_queue_stats_workers_full_set
    __swig_getmethods__["workers_full"] = _work_queue.work_queue_stats_workers_full_get
    if _newclass:workers_full = _swig_property(_work_queue.work_queue_stats_workers_full_get, _work_queue.work_queue_stats_workers_full_set)
    __swig_setmethods__["total_worker_slots"] = _work_queue.work_queue_stats_total_worker_slots_set
    __swig_getmethods__["total_worker_slots"] = _work_queue.work_queue_stats_total_worker_slots_get
    if _newclass:total_worker_slots = _swig_property(_work_queue.work_queue_stats_total_worker_slots_get, _work_queue.work_queue_stats_total_worker_slots_set)
    __swig_setmethods__["avg_capacity"] = _work_queue.work_queue_stats_avg_capacity_set
    __swig_getmethods__["avg_capacity"] = _work_queue.work_queue_stats_avg_capacity_get
    if _newclass:avg_capacity = _swig_property(_work_queue.work_queue_stats_avg_capacity_get, _work_queue.work_queue_stats_avg_capacity_set)
    def __init__(self): 
        this = _work_queue.new_work_queue_stats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _work_queue.delete_work_queue_stats
    __del__ = lambda self : None;
work_queue_stats_swigregister = _work_queue.work_queue_stats_swigregister
work_queue_stats_swigregister(work_queue_stats)


def work_queue_task_create(*args):
  return _work_queue.work_queue_task_create(*args)
work_queue_task_create = _work_queue.work_queue_task_create

def work_queue_task_clone(*args):
  return _work_queue.work_queue_task_clone(*args)
work_queue_task_clone = _work_queue.work_queue_task_clone

def work_queue_task_specify_command(*args):
  return _work_queue.work_queue_task_specify_command(*args)
work_queue_task_specify_command = _work_queue.work_queue_task_specify_command

def work_queue_task_specify_file(*args):
  return _work_queue.work_queue_task_specify_file(*args)
work_queue_task_specify_file = _work_queue.work_queue_task_specify_file

def work_queue_task_specify_file_piece(*args):
  return _work_queue.work_queue_task_specify_file_piece(*args)
work_queue_task_specify_file_piece = _work_queue.work_queue_task_specify_file_piece

def work_queue_task_specify_buffer(*args):
  return _work_queue.work_queue_task_specify_buffer(*args)
work_queue_task_specify_buffer = _work_queue.work_queue_task_specify_buffer

def work_queue_task_specify_directory(*args):
  return _work_queue.work_queue_task_specify_directory(*args)
work_queue_task_specify_directory = _work_queue.work_queue_task_specify_directory

def work_queue_task_specify_memory(*args):
  return _work_queue.work_queue_task_specify_memory(*args)
work_queue_task_specify_memory = _work_queue.work_queue_task_specify_memory

def work_queue_task_specify_disk(*args):
  return _work_queue.work_queue_task_specify_disk(*args)
work_queue_task_specify_disk = _work_queue.work_queue_task_specify_disk

def work_queue_task_specify_cores(*args):
  return _work_queue.work_queue_task_specify_cores(*args)
work_queue_task_specify_cores = _work_queue.work_queue_task_specify_cores

def work_queue_task_specify_gpus(*args):
  return _work_queue.work_queue_task_specify_gpus(*args)
work_queue_task_specify_gpus = _work_queue.work_queue_task_specify_gpus

def work_queue_task_specify_tag(*args):
  return _work_queue.work_queue_task_specify_tag(*args)
work_queue_task_specify_tag = _work_queue.work_queue_task_specify_tag

def work_queue_task_specify_algorithm(*args):
  return _work_queue.work_queue_task_specify_algorithm(*args)
work_queue_task_specify_algorithm = _work_queue.work_queue_task_specify_algorithm

def work_queue_task_delete(*args):
  return _work_queue.work_queue_task_delete(*args)
work_queue_task_delete = _work_queue.work_queue_task_delete

def work_queue_create(*args):
  return _work_queue.work_queue_create(*args)
work_queue_create = _work_queue.work_queue_create

def work_queue_enable_monitoring(*args):
  return _work_queue.work_queue_enable_monitoring(*args)
work_queue_enable_monitoring = _work_queue.work_queue_enable_monitoring

def work_queue_submit(*args):
  return _work_queue.work_queue_submit(*args)
work_queue_submit = _work_queue.work_queue_submit

def work_queue_blacklist_add(*args):
  return _work_queue.work_queue_blacklist_add(*args)
work_queue_blacklist_add = _work_queue.work_queue_blacklist_add

def work_queue_blacklist_remove(*args):
  return _work_queue.work_queue_blacklist_remove(*args)
work_queue_blacklist_remove = _work_queue.work_queue_blacklist_remove

def work_queue_blacklist_clear(*args):
  return _work_queue.work_queue_blacklist_clear(*args)
work_queue_blacklist_clear = _work_queue.work_queue_blacklist_clear

def work_queue_wait(*args):
  return _work_queue.work_queue_wait(*args)
work_queue_wait = _work_queue.work_queue_wait

def work_queue_hungry(*args):
  return _work_queue.work_queue_hungry(*args)
work_queue_hungry = _work_queue.work_queue_hungry

def work_queue_empty(*args):
  return _work_queue.work_queue_empty(*args)
work_queue_empty = _work_queue.work_queue_empty

def work_queue_port(*args):
  return _work_queue.work_queue_port(*args)
work_queue_port = _work_queue.work_queue_port

def work_queue_get_stats(*args):
  return _work_queue.work_queue_get_stats(*args)
work_queue_get_stats = _work_queue.work_queue_get_stats

def work_queue_set_bandwidth_limit(*args):
  return _work_queue.work_queue_set_bandwidth_limit(*args)
work_queue_set_bandwidth_limit = _work_queue.work_queue_set_bandwidth_limit

def work_queue_get_effective_bandwidth(*args):
  return _work_queue.work_queue_get_effective_bandwidth(*args)
work_queue_get_effective_bandwidth = _work_queue.work_queue_get_effective_bandwidth

def work_queue_get_worker_summary(*args):
  return _work_queue.work_queue_get_worker_summary(*args)
work_queue_get_worker_summary = _work_queue.work_queue_get_worker_summary

def work_queue_activate_fast_abort(*args):
  return _work_queue.work_queue_activate_fast_abort(*args)
work_queue_activate_fast_abort = _work_queue.work_queue_activate_fast_abort

def work_queue_specify_algorithm(*args):
  return _work_queue.work_queue_specify_algorithm(*args)
work_queue_specify_algorithm = _work_queue.work_queue_specify_algorithm

def work_queue_specify_task_order(*args):
  return _work_queue.work_queue_specify_task_order(*args)
work_queue_specify_task_order = _work_queue.work_queue_specify_task_order

def work_queue_name(*args):
  return _work_queue.work_queue_name(*args)
work_queue_name = _work_queue.work_queue_name

def work_queue_specify_name(*args):
  return _work_queue.work_queue_specify_name(*args)
work_queue_specify_name = _work_queue.work_queue_specify_name

def work_queue_specify_priority(*args):
  return _work_queue.work_queue_specify_priority(*args)
work_queue_specify_priority = _work_queue.work_queue_specify_priority

def work_queue_specify_catalog_server(*args):
  return _work_queue.work_queue_specify_catalog_server(*args)
work_queue_specify_catalog_server = _work_queue.work_queue_specify_catalog_server

def work_queue_cancel_by_taskid(*args):
  return _work_queue.work_queue_cancel_by_taskid(*args)
work_queue_cancel_by_taskid = _work_queue.work_queue_cancel_by_taskid

def work_queue_cancel_by_tasktag(*args):
  return _work_queue.work_queue_cancel_by_tasktag(*args)
work_queue_cancel_by_tasktag = _work_queue.work_queue_cancel_by_tasktag

def work_queue_shut_down_workers(*args):
  return _work_queue.work_queue_shut_down_workers(*args)
work_queue_shut_down_workers = _work_queue.work_queue_shut_down_workers

def work_queue_delete(*args):
  return _work_queue.work_queue_delete(*args)
work_queue_delete = _work_queue.work_queue_delete

def work_queue_specify_log(*args):
  return _work_queue.work_queue_specify_log(*args)
work_queue_specify_log = _work_queue.work_queue_specify_log

def work_queue_specify_password(*args):
  return _work_queue.work_queue_specify_password(*args)
work_queue_specify_password = _work_queue.work_queue_specify_password

def work_queue_specify_password_file(*args):
  return _work_queue.work_queue_specify_password_file(*args)
work_queue_specify_password_file = _work_queue.work_queue_specify_password_file

def work_queue_specify_keepalive_interval(*args):
  return _work_queue.work_queue_specify_keepalive_interval(*args)
work_queue_specify_keepalive_interval = _work_queue.work_queue_specify_keepalive_interval

def work_queue_specify_keepalive_timeout(*args):
  return _work_queue.work_queue_specify_keepalive_timeout(*args)
work_queue_specify_keepalive_timeout = _work_queue.work_queue_specify_keepalive_timeout

def work_queue_tune(*args):
  return _work_queue.work_queue_tune(*args)
work_queue_tune = _work_queue.work_queue_tune
WORK_QUEUE_MASTER_MODE_STANDALONE = _work_queue.WORK_QUEUE_MASTER_MODE_STANDALONE
WORK_QUEUE_MASTER_MODE_CATALOG = _work_queue.WORK_QUEUE_MASTER_MODE_CATALOG

def work_queue_specify_master_mode(*args):
  return _work_queue.work_queue_specify_master_mode(*args)
work_queue_specify_master_mode = _work_queue.work_queue_specify_master_mode

def work_queue_specify_estimate_capacity_on(*args):
  return _work_queue.work_queue_specify_estimate_capacity_on(*args)
work_queue_specify_estimate_capacity_on = _work_queue.work_queue_specify_estimate_capacity_on

def work_queue_task_specify_input_buf(*args):
  return _work_queue.work_queue_task_specify_input_buf(*args)
work_queue_task_specify_input_buf = _work_queue.work_queue_task_specify_input_buf

def work_queue_task_specify_input_file(*args):
  return _work_queue.work_queue_task_specify_input_file(*args)
work_queue_task_specify_input_file = _work_queue.work_queue_task_specify_input_file

def work_queue_task_specify_input_file_do_not_cache(*args):
  return _work_queue.work_queue_task_specify_input_file_do_not_cache(*args)
work_queue_task_specify_input_file_do_not_cache = _work_queue.work_queue_task_specify_input_file_do_not_cache

def work_queue_task_specify_output_file(*args):
  return _work_queue.work_queue_task_specify_output_file(*args)
work_queue_task_specify_output_file = _work_queue.work_queue_task_specify_output_file

def work_queue_task_specify_output_file_do_not_cache(*args):
  return _work_queue.work_queue_task_specify_output_file_do_not_cache(*args)
work_queue_task_specify_output_file_do_not_cache = _work_queue.work_queue_task_specify_output_file_do_not_cache

def work_queue_activate_worker_waiting(*args):
  return _work_queue.work_queue_activate_worker_waiting(*args)
work_queue_activate_worker_waiting = _work_queue.work_queue_activate_worker_waiting


## @package WorkQueuePython
#
# Python Work Queue bindings.
#
# The objects and methods provided by this package correspond to the native 
# C API in @ref work_queue.h.
#
# The SWIG-based Python bindings provide a higher-level interface that
# revolves around the following objects:
#
# - @ref work_queue::WorkQueue
# - @ref work_queue::Task

import copy
import os

def set_debug_flag(*flags):
    for flag in flags:
        cctools_debug_flags_set(flag)

cctools_debug_config('work_queue_python')

##
# Python Task object
#
# This class is used to create a task specification.
class Task(_object):

    ##
    # Create a new task specification.
    #
    # @param self       Reference to the current task object.
    # @param command    The shell command line to be exected by the task.
    def __init__(self, command):
        self._task = None

        try:
            self._task = work_queue_task_create(command)
            if not self._task:
                raise
        except:
            raise Exception('Unable to create internal Task structure')
 
    def __del__(self):
        if self._task:
            work_queue_task_delete(self._task)

    @staticmethod
    def _determine_file_flags(flags, cache):
        if flags is None:
            flags = WORK_QUEUE_CACHE

        if cache:
            flags |= WORK_QUEUE_CACHE
        else:
            flags &= ~WORK_QUEUE_CACHE

        return flags

    ##
    # Return a copy of this task
    #
    def clone(self):
        """Return a (deep)copy this task that can also be submitted to the WorkQueue."""
        new = copy.copy(self)
        new._task = work_queue_task_clone(self._task)
        return new

   
    ##
    # Set the command to be executed by the task.
    #
    # @param self       Reference to the current task object.
    # @param command    The command to be executed. 
    def specify_command(self, command):
        return work_queue_task_specify_command(self._task, command)

    ##
    # Set the worker selection algorithm for task.
    #
    # @param self       Reference to the current task object.
    # @param algorithm  One of the following algorithms to use in assigning a
    #                   task to a worker:
    #                   - @ref WORK_QUEUE_SCHEDULE_FCFS
    #                   - @ref WORK_QUEUE_SCHEDULE_FILES
    #                   - @ref WORK_QUEUE_SCHEDULE_TIME
    #                   - @ref WORK_QUEUE_SCHEDULE_RAND
    def specify_algorithm(self, algorithm):
        return work_queue_task_specify_algorithm(self._task, algorithm)

    ##
    # Attach a user defined logical name to the task.
    #
    # @param self       Reference to the current task object.
    # @param tag        The tag to attach to task.
    def specify_tag(self, tag):
        return work_queue_task_specify_tag(self._task, tag)
   
    ##
    # Indicate that the task would be optimally run on a given host.
    #
    # @param self       Reference to the current task object.
    # @param hostname   The hostname to which this task would optimally be sent.
    def specify_preferred_host(self, hostname):
        return work_queue_task_specify_preferred_host(self._task, hostname)

    ##
    # Add a file to the task.
    #
    # @param self           Reference to the current task object.
    # @param local_name     The name of the file on local disk or shared filesystem.
    # @param remote_name    The name of the file at the execution site.
    # @param type           Must be one of the following values: @ref WORK_QUEUE_INPUT or @ref WORK_QUEUE_OUTPUT
    # @param flags          May be zero to indicate no special handling, or any of the following or'd together:
    #                       - @ref WORK_QUEUE_NOCACHE
    #                       - @ref WORK_QUEUE_CACHE
    #                       - @ref WORK_QUEUE_WATCH
    # @param cache          Legacy parameter for setting file caching attribute.  By default this is enabled.
    #
    # For example:
    # @code
    # # The following are equivalent
    # >>> task.specify_file("/etc/hosts", type=WORK_QUEUE_INPUT, flags=WORK_QUEUE_NOCACHE)
    # >>> task.specify_file("/etc/hosts", "hosts", type=WORK_QUEUE_INPUT, cache=false)
    # @endcode
    def specify_file(self, local_name, remote_name=None, type=None, flags=None, cache=True):
        if remote_name is None:
            remote_name = os.path.basename(local_name)

        if type is None:
            type = WORK_QUEUE_INPUT

        flags = Task._determine_file_flags(flags, cache)
        return work_queue_task_specify_file(self._task, local_name, remote_name, type, flags)

    ##
    # Add a file piece to the task.
    #
    # @param self           Reference to the current task object.
    # @param local_name     The name of the file on local disk or shared filesystem.
    # @param remote_name    The name of the file at the execution site.
    # @param start_byte     The starting byte offset of the file piece to be transferred.
    # @param end_byte       The ending byte offset of the file piece to be transferred. 
    # @param type           Must be one of the following values: @ref WORK_QUEUE_INPUT or @ref WORK_QUEUE_OUTPUT
    # @param flags          May be zero to indicate no special handling, or any of the following or'd together:
    #                       - @ref WORK_QUEUE_NOCACHE
    #                       - @ref WORK_QUEUE_CACHE
    # @param cache          Legacy parameter for setting file caching attribute.  By default this is enabled.
    def specify_file_piece(self, local_name, remote_name=None, start_byte=0, end_byte=0, type=None, flags=None, cache=True):
        if remote_name is None:
            remote_name = os.path.basename(local_name)

        if type is None:
            type = WORK_QUEUE_INPUT

        flags = Task._determine_file_flags(flags, cache)
        return work_queue_task_specify_file_piece(self._task, local_name, remote_name, start_byte, end_byte, type, flags)

    ##
    # Add a input file to the task.
    #
    # This is just a wrapper for @ref specify_file with type set to @ref WORK_QUEUE_INPUT.
    def specify_input_file(self, local_name, remote_name=None, flags=None, cache=True):
        return self.specify_file(local_name, remote_name, WORK_QUEUE_INPUT, flags, cache)

    ##
    # Add a output file to the task.
    #
    # This is just a wrapper for @ref specify_file with type set to @ref WORK_QUEUE_OUTPUT.
    def specify_output_file(self, local_name, remote_name=None, flags=None, cache=True):
        return self.specify_file(local_name, remote_name, WORK_QUEUE_OUTPUT, flags, cache)

    ##
    # Add a directory to the task.
    # @param self           Reference to the current task object.
    # @param local_name     The name of the directory on local disk or shared filesystem. Optional if the directory is empty.
    # @param remote_name    The name of the directory at the remote execution site.
    # @param type           Must be one of the following values: @ref WORK_QUEUE_INPUT or @ref WORK_QUEUE_OUTPUT
    # @param flags          May be zero to indicate no special handling, or any of the following or'd together:
    #                       - @ref WORK_QUEUE_NOCACHE
    #                       - @ref WORK_QUEUE_CACHE
    # @param recursive      Indicates whether just the directory (0) or the directory and all of its contents (1) should be included.
    # @param cache          Legacy parameter for setting file caching attribute.  By default this is enabled.
    # @return 1 if the task directory is successfully specified, 0 if either of @a local_name, or @a remote_name is null or @a remote_name is an absolute path.
    def specify_directory(self, local_name, remote_name=None, type=None, flags=None, recursive=0, cache=True):
        if remote_name is None:
            remote_name = os.path.basename(local_name)

        if type is None:
            type = WORK_QUEUE_INPUT

        flags = Task._determine_file_flags(flags, cache)
        return work_queue_task_specify_directory(self._task, local_name, remote_name, type, flags, recursive)

    ##
    # Add an input bufer to the task.
    #
    # @param self           Reference to the current task object.
    # @param buffer         The contents of the buffer to pass as input.
    # @param remote_name    The name of the remote file to create.
    # @param flags          May take the same values as @ref specify_file.
    # @param cache          Legacy parameter for setting file caching attribute.  By default this is enabled.
    def specify_buffer(self, buffer, remote_name, flags=None, cache=True):
        flags = Task._determine_file_flags(flags, cache)
        return work_queue_task_specify_buffer(self._task, buffer, len(buffer), remote_name, flags)

    ##
    # Indicate the number of cores required by this task.
    def specify_cores( self, cores ):
        return work_queue_task_specify_cores(self._task,cores)

    ##
    # Indicate the memory (in MB) required by this task.
    def specify_memory( self, memory ):
        return work_queue_task_specify_memory(self._task,memory)

    ##
    # Indicate the disk space (in MB) required by this task.
    def specify_disk( self, disk ):
        return work_queue_task_specify_disk(self._task,disk)

    ##
    # Get the user-defined logical name for the task. 
    # 
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print t.tag
    # @endcode 
    @property
    def tag(self):
        return self._task.tag

    ## 
    # Get the shell command executed by the task.
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print t.command
    # @endcode
    @property
    def command(self):
        return self._task.command_line
    
    ##
    # Get the algorithm for choosing worker to run the task.	 
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print t.algorithm
    # @endcode
    @property
    def algorithm(self):
        return self._task.worker_selection_algorithm

    ## 
    # Get the standard output of the task. Must be called only after the task
	# completes execution.  	
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print t.output
    # @endcode
    @property
    def output(self):
        return self._task.output

    ## 
    # Get the task id number. Must be called only after the task was submitted. 
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print t.id
    # @endcode
    @property
    def id(self):
        return self._task.taskid

    ## 
    # Get the exit code of the command executed by the task. Must be called only
	# after the task completes execution.
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print t.return_status
    # @endcode
    @property
    def return_status(self):
        return self._task.return_status

    ## 
    # Get the result of the task (successful, failed return_status, missing input file, missing output file). 
    # Must be called only after the task completes execution.
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print t.result
    # @endcode
    @property
    def result(self):
        return self._task.result

    ##
    # Get the number of times the task has been resubmitted internally.
    # Must be called only after the task completes execution.
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print t.total_submissions
    # @endcode
    @property
    def total_submissions(self):
        return self._task.total_submissions

    ## 
    # Get the address and port of the host on which the task ran.
    # Must be called only after the task completes execution.
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print t.host
    # @endcode
    @property
    def host(self):
        return self._task.host
		
    ## 
    # Get the name of the host on which the task ran.  
	# Must be called only after the task completes execution.
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print t.hostname
    # @endcode
    @property
    def hostname(self):
        return self._task.hostname

    ## 
    # Get the time at which this task was submitted.
    # Must be called only after the task completes execution.
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print t.submit_time
    # @endcode
    @property
    def submit_time(self):
        return self._task.time_task_submit

    ## 
    # Get the time at which this task was finished. 
    # Must be called only after the task completes execution.
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print t.finish_time
    # @endcode
    @property
    def finish_time(self):
        return self._task.time_task_finish

    ## 
    # Get the time spent in upper-level application (outside of work_queue_wait).
    # Must be called only after the task completes execution.
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print t.app_delay
    # @endcode
    @property
    def app_delay(self):
        return self._task.time_app_delay

    ## 
    # Get the time at which the task started to transfer input files. 
    # Must be called only after the task completes execution.
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print t.send_input_start
    # @endcode
    @property
    def send_input_start(self):
        return self._task.time_send_input_start

    ## 
    # Get the time at which the task finished transferring input files. 
    # Must be called only after the task completes execution.
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print t.send_input_finish
    # @endcode
    @property
    def send_input_finish(self):
        return self._task.time_send_input_finish

    ## 
    # The time at which the task began.
    # Must be called only after the task completes execution.
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print t.execute_cmd_start
    # @endcode
    @property
    def execute_cmd_start(self):
        return self._task.time_execute_cmd_start

    ## 
    # Get the time at which the task finished (discovered by the master). 
    # Must be called only after the task completes execution.
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print t.execute_cmd_finish
    # @endcode
    @property
    def execute_cmd_finish(self):
        return self._task.time_execute_cmd_finish

    ## 
	# Get the time at which the task started to transfer output files. 
    # Must be called only after the task completes execution.
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print t.receive_output_start
    # @endcode
    @property
    def receive_output_start(self):
        return self._task.time_receive_output_start

    ## 
    # Get the time at which the task finished transferring output files. 
    # Must be called only after the task completes execution.
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print t.receive_output_finish
    # @endcode
    @property
    def receive_output_finish(self):
        return self._task.time_receive_output_finish

    ## 
    # Get the number of bytes received since task started receiving input data.
    # Must be called only after the task completes execution.
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print t.total_bytes_received
    # @endcode
    @property
    def total_bytes_received(self):
        return self._task.total_bytes_received

    ## 
    # Get the number of bytes sent since task started sending input data.
    # Must be called only after the task completes execution.
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print t.total_bytes_sent
    # @endcode
    @property
    def total_bytes_sent(self):
        return self._task.total_bytes_sent

    ## 
    # Get the number of bytes transferred since task started transferring input data.
    # Must be called only after the task completes execution.
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print t.total_bytes_transferred
    # @endcode
    @property
    def total_bytes_transferred(self):
        return self._task.total_bytes_transferred

    ## 
    # Get the time comsumed in microseconds for transferring total_bytes_transferred. 
   	# Must be called only after the task completes execution.
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print t.total_transfer_time
    # @endcode
    @property
    def total_transfer_time(self):
        return self._task.total_transfer_time

    ## 
    # Get the time spent in microseconds for executing the command on the worker. 
    # Must be called only after the task completes execution.
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print t.cmd_execution_time
    # @endcode
    @property
    def cmd_execution_time(self):
        return self._task.cmd_execution_time 

    ## 
    # Get the time spent in microseconds for executing the command on any worker. 
    # Must be called only after the task completes execution.
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print t.total_cmd_execution_time
    # @endcode
    @property
    def total_cmd_execution_time(self):
        return self._task.total_cmd_execution_time 


##
# Python Work Queue object
#
# This class uses a dictionary to map between the task pointer objects and the
# @ref work_queue::Task.
class WorkQueue(_object):
    ##
    # Create a new work queue.
    #
    # @param self       Reference to the current work queue object.
    # @param port       The port number to listen on. If zero is specified, then the default is chosen, and if -1 is specified, a random port is chosen.
    # @param name       The project name to use.
    # @param catalog    Whether or not to enable catalog mode.
    # @param exclusive  Whether or not the workers should be exclusive.
    # @param shutdown   Automatically shutdown workers when queue is finished. Disabled by default.
    #
    # @see work_queue_create    - For more information about environmental variables that affect the behavior this method.
    def __init__(self, port=WORK_QUEUE_DEFAULT_PORT, name=None, catalog=False, exclusive=True, shutdown=False):
        self._shutdown   = shutdown
        self._work_queue = None
        self._stats      = None
        self._task_table = {}

        try:
            self._work_queue = work_queue_create(port)
            self._stats      = work_queue_stats()
            if not self._work_queue:
                raise Exception('Could not create work_queue on port %d' % port)

            if name:
                work_queue_specify_name(self._work_queue, name)

            work_queue_specify_master_mode(self._work_queue, catalog)
        except Exception, e:
            raise Exception('Unable to create internal Work Queue structure: %s' % e)

    def __del__(self):
        if self._work_queue:
            if self._shutdown:
                self.shutdown_workers(0)
            work_queue_delete(self._work_queue)
    
    ##
    # Get the project name of the queue. 
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print q.name
    # @endcode
    @property
    def name(self):
        return work_queue_name(self._work_queue)

    ##
    # Get the listening port of the queue.  
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print q.port
    # @endcode
    @property
    def port(self):
        return work_queue_port(self._work_queue)

    ##
    # Get queue statistics.  
    # @a Note: This is defined using property decorator. So it must be called without parentheses
    # (). For example:
    # @code
    # >>> print q.stats
    # @endcode
    # The fields in @ref work_queue_stats can also be individually accessed through this call. For example:
    # @code
    # >>> print q.stats.workers_busy
    # @endcode
    @property
    def stats(self):
        work_queue_get_stats(self._work_queue, self._stats)
        return self._stats

    ## Enables resource monitoring of tasks in the queue. And writes a summary of the monitored information to a file.
    #
    #  Returns 1 on success, 0 on failure (i.e., monitoring was not enabled).
    #	
    # @param self 	Reference to the current work queue object.
    # @param summaryfile Filename for the summary log (If NULL, writes to wq-\<pid\>-resource-usage).
    def enable_monitoring(self, summaryfile):
        return work_queue_enable_monitoring(self._work_queue, summaryfile)	

    ##
    # Turn on or off fast abort functionality for a given queue.
    #
    # @param self       Reference to the current work queue object.
    # @param multiplier The multiplier of the average task time at which point to abort; if negative (the default) fast_abort is deactivated.
    def activate_fast_abort(self, multiplier):
        return work_queue_activate_fast_abort(self._work_queue, multiplier)

    ##
    # Determine whether there are any known tasks queued, running, or waiting to be collected.
    #
    # Returns 0 if there are tasks remaining in the system, 1 if the system is "empty".
    #
    # @param self       Reference to the current work queue object.
    def empty(self):
        return work_queue_empty(self._work_queue)

    ##
    # Determine whether the queue can support more tasks.
    #
    # Returns the number of additional tasks it can support if "hungry" and 0 if "sated".
    #
    # @param self       Reference to the current work queue object.
    def hungry(self):
        return work_queue_hungry(self._work_queue)

    ##
    # Set the worker selection algorithm for queue.
    #
    # @param self       Reference to the current work queue object.
    # @param algorithm  One of the following algorithms to use in assigning a
    #                   task to a worker:
    #                   - @ref WORK_QUEUE_SCHEDULE_FCFS
    #                   - @ref WORK_QUEUE_SCHEDULE_FILES
    #                   - @ref WORK_QUEUE_SCHEDULE_TIME
    #                   - @ref WORK_QUEUE_SCHEDULE_RAND
    def specify_algorithm(self, algorithm):
        return work_queue_specify_algorithm(self._work_queue, algorithm)

    ##
    # Set the order for dispatching submitted tasks in the queue.
    #
    # @param self       Reference to the current work queue object.
    # @param order  	One of the following algorithms to use in dispatching
	# 					submitted tasks to workers:
    #                   - @ref WORK_QUEUE_TASK_ORDER_FIFO
    #                   - @ref WORK_QUEUE_TASK_ORDER_LIFO
    def specify_task_order(self, order):
        return work_queue_specify_task_order(self._work_queue, order)

    ##
    # Change the project name for the given queue.
    #
    # @param self   Reference to the current work queue object.
    # @param name   The new project name.
    def specify_name(self, name):
        return work_queue_specify_name(self._work_queue, name)

    ##
    # Change the project priority for the given queue.
    #
    # @param self       Reference to the current work queue object.
    # @param priority   An integer that presents the priorty of this work queue master. The higher the value, the higher the priority.
    def specify_priority(self, priority):
        return work_queue_specify_priority(self._work_queue, priority)

    ##
    # Specify the master mode for the given queue.
    #
    # @param self   Reference to the current work queue object.
    # @param mode   This may be one of the following values: @ref WORK_QUEUE_MASTER_MODE_STANDALONE or @ref WORK_QUEUE_MASTER_MODE_CATALOG.
    def specify_master_mode(self, mode):
        return work_queue_specify_master_mode(self._work_queue, mode)

    ##
    # Specify the catalog server the master should report to.
    #
    # @param self       Reference to the current work queue object.
    # @param hostname   The hostname of the catalog server.
    # @param port       The port the catalog server is listening on.
    def specify_catalog_server(self, hostname, port):
        return work_queue_specify_catalog_server(self._work_queue, hostname, port) 

    ##
    # Specify a log file that records the states of connected workers and submitted tasks. 
    #
    # @param self     Reference to the current work queue object.
    # @param logfile  Filename. 
    def specify_log(self, logfile):
        return work_queue_specify_log(self._work_queue, logfile)
    
    ##
    # Add a mandatory password that each worker must present.
    #
    # @param self      Reference to the current work queue object.
    # @param password  The password.

    def specify_password(self, password):
        return work_queue_specify_password(self._work_queue, password)
    
    ##
    # Add a mandatory password file that each worker must present.
    #
    # @param self      Reference to the current work queue object.
    # @param file      Name of the file containing the password.

    def specify_password_file(self, file):
        return work_queue_specify_password_file(self._work_queue, file)
    
    ##
    # Cancel task identified by its taskid and remove from the given queue. 
    #
    # @param self   Reference to the current work queue object.
    # @param id     The taskid returned from @ref submit.
    def cancel_by_taskid(self, id):
        return work_queue_cancel_by_taskid(self._work_queue, id)

    ##
    # Cancel task identified by its tag and remove from the given queue. 
    #
    # @param self   Reference to the current work queue object.
    # @param tag    The tag assigned to task using @ref work_queue_task_specify_tag.
    def cancel_by_tasktag(self, tag):
        return work_queue_cancel_by_tasktag(self._work_queue, tag)

    ##
    # Shutdown workers connected to queue.
    #
    # Gives a best effort and then returns the number of workers given the shutdown order.
    #
    # @param self   Reference to the current work queue object.
    # @param n      The number to shutdown.  To shut down all workers, specify "0".
    def shutdown_workers(self, n):
        return work_queue_shut_down_workers(self._work_queue, n)

    ##
    # Change keepalive interval for a given queue.
    #
    # @param self     Reference to the current work queue object.
    # @param interval Minimum number of seconds to wait before sending new keepalive
    #                 checks to workers.
    def specify_keepalive_interval(self, interval):
        return work_queue_specify_keepalive_interval(self._work_queue, interval)

    ##
    # Change keepalive timeout for a given queue.
    #
    # @param self     Reference to the current work queue object.
    # @param timeout  Minimum number of seconds to wait for a keepalive response
    #                 from worker before marking it as dead.
    def specify_keepalive_timeout(self, timeout):
        return work_queue_specify_keepalive_timeout(self._work_queue, timeout)

    ##
    # Turn on master capacity measurements.
    #
    # @param self     Reference to the current work queue object.
    #                 
    def estimate_capacity(self):
        return work_queue_specify_estimate_capacity_on(self._work_queue, 1)

    ##
    # Tune advanced parameters for work queue.
    # 
    # @param self  Reference to the current work queue object.
    # @param name  The name fo the parameter to tune. Can be one of following:
    #              - "asynchrony-multiplier" Treat each worker as having (actual_cores * multiplier) total cores. (default = 1.0)
    #              - "asynchrony-modifier" Treat each worker as having an additional "modifier" cores. (default=0)
    #              - "min-transfer-timeout" Set the minimum number of seconds to wait for files to be transferred to or from a worker. (default=300)
    #              - "foreman-transfer-timeout" Set the minimum number of seconds to wait for files to be transferred to or from a foreman. (default=3600)
    #              - "fast-abort-multiplier" Set the multiplier of the average task time at which point to abort; if negative or zero fast_abort is deactivated. (default=0)
    #              - "keepalive-interval" Set the minimum number of seconds to wait before sending new keepalive checks to workers. (default=300)
    #              - "keepalive-timeout" Set the minimum number of seconds to wait for a keepalive response from worker before marking it as dead. (default=30)
    # @param value The value to set the parameter to.
    # @return 0 on succes, -1 on failure.
    #
    def tune(self, name, value):
        return work_queue_tune(self._work_queue, name, value)
           	
    ##
    # Submit a task to the queue.
    #
    # It is safe to re-submit a task returned by @ref wait.
    #
    # @param self   Reference to the current work queue object.
    # @param task   A task description created from @ref work_queue::Task.
    def submit(self, task):
        taskid = work_queue_submit(self._work_queue, task._task)
        self._task_table[taskid] = task
        return taskid 

    ##
    # Wait for tasks to complete.
    #
    # This call will block until the timeout has elapsed
    #
    # @param self       Reference to the current work queue object.
    # @param timeout    The number of seconds to wait for a completed task
    #                   before returning.  Use an integer to set the timeout or the constant @ref
    #                   WORK_QUEUE_WAITFORTASK to block until a task has completed.
    def wait(self, timeout=WORK_QUEUE_WAITFORTASK):
        task_pointer = work_queue_wait(self._work_queue, timeout)
        if task_pointer:
            task = self._task_table[int(task_pointer.taskid)]
            del(self._task_table[task_pointer.taskid])
            return task
        return None
